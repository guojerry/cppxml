#ifndef INC_STDCTokenTypes_hpp_
#define INC_STDCTokenTypes_hpp_

/* $ANTLR 2.7.7 (20060906): "CPP_parser.g" -> "STDCTokenTypes.hpp"$ */

#ifndef CUSTOM_API
# define CUSTOM_API
#endif

#ifdef __cplusplus
struct CUSTOM_API STDCTokenTypes {
#endif
	enum {
		EOF_ = 1,
		LITERAL_template = 4,
		LESSTHAN = 5,
		GREATERTHAN = 6,
		LITERAL_typedef = 7,
		LITERAL_enum = 8,
		SEMICOLON = 9,
		ID = 10,
		LCURLY = 11,
		LITERAL_inline = 12,
		LITERAL_extern = 13,
		LITERAL_namespace = 14,
		LITERAL_antlrTrace_on = 15,
		LITERAL_antlrTrace_off = 16,
		RCURLY = 17,
		ASSIGNEQUAL = 18,
		COLON = 19,
		OCTALINT = 20,
		LITERAL_friend = 21,
		StringLiteral = 22,
		LITERAL_struct = 23,
		LITERAL_union = 24,
		LITERAL_class = 25,
		LITERAL__declspec = 26,
		LITERAL___declspec = 27,
		LPAREN = 28,
		RPAREN = 29,
		LITERAL_auto = 30,
		LITERAL_register = 31,
		LITERAL_static = 32,
		LITERAL_mutable = 33,
		LITERAL__inline = 34,
		LITERAL___inline = 35,
		LITERAL_virtual = 36,
		LITERAL_explicit = 37,
		LITERAL_typename = 38,
		LITERAL_char = 39,
		LITERAL_wchar_t = 40,
		LITERAL_bool = 41,
		LITERAL_short = 42,
		LITERAL_int = 43,
		// "_int8" = 44
		// "__int8" = 45
		// "_int16" = 46
		// "__int16" = 47
		// "_int32" = 48
		// "__int32" = 49
		// "_int64" = 50
		// "__int64" = 51
		// "_w64" = 52
		// "__w64" = 53
		LITERAL_long = 54,
		LITERAL_signed = 55,
		LITERAL_unsigned = 56,
		LITERAL_float = 57,
		LITERAL_double = 58,
		LITERAL_void = 59,
		LITERAL_const = 60,
		LITERAL_volatile = 61,
		COMMA = 62,
		LITERAL_public = 63,
		LITERAL_protected = 64,
		LITERAL_private = 65,
		OPERATOR = 66,
		TILDE = 67,
		LSQUARE = 68,
		RSQUARE = 69,
		STAR = 70,
		AMPERSAND = 71,
		ELLIPSIS = 72,
		LITERAL_throw = 73,
		LITERAL_using = 74,
		LITERAL_case = 75,
		LITERAL_default = 76,
		LITERAL_if = 77,
		LITERAL_else = 78,
		LITERAL_switch = 79,
		LITERAL_while = 80,
		LITERAL_do = 81,
		LITERAL_for = 82,
		LITERAL_goto = 83,
		LITERAL_continue = 84,
		LITERAL_break = 85,
		LITERAL_return = 86,
		LITERAL_try = 87,
		LITERAL_catch = 88,
		TIMESEQUAL = 89,
		DIVIDEEQUAL = 90,
		MINUSEQUAL = 91,
		PLUSEQUAL = 92,
		MODEQUAL = 93,
		SHIFTLEFTEQUAL = 94,
		SHIFTRIGHTEQUAL = 95,
		BITWISEANDEQUAL = 96,
		BITWISEXOREQUAL = 97,
		BITWISEOREQUAL = 98,
		QUESTIONMARK = 99,
		OR = 100,
		AND = 101,
		BITWISEOR = 102,
		BITWISEXOR = 103,
		NOTEQUAL = 104,
		EQUAL = 105,
		LESSTHANOREQUALTO = 106,
		GREATERTHANOREQUALTO = 107,
		SHIFTLEFT = 108,
		SHIFTRIGHT = 109,
		PLUS = 110,
		MINUS = 111,
		DIVIDE = 112,
		MOD = 113,
		DOTMBR = 114,
		POINTERTOMBR = 115,
		PLUSPLUS = 116,
		MINUSMINUS = 117,
		LITERAL_sizeof = 118,
		LITERAL___alignof__ = 119,
		SCOPE = 120,
		DOT = 121,
		POINTERTO = 122,
		LITERAL_dynamic_cast = 123,
		LITERAL_static_cast = 124,
		LITERAL_reinterpret_cast = 125,
		LITERAL_const_cast = 126,
		LITERAL_typeid = 127,
		LITERAL_this = 128,
		DECIMALINT = 129,
		HEXADECIMALINT = 130,
		CharLiteral = 131,
		WCharLiteral = 132,
		WStringLiteral = 133,
		FLOATONE = 134,
		FLOATTWO = 135,
		LITERAL_true = 136,
		LITERAL_false = 137,
		NOT = 138,
		LITERAL_new = 139,
		LITERAL__cdecl = 140,
		LITERAL___cdecl = 141,
		LITERAL__near = 142,
		LITERAL___near = 143,
		LITERAL__far = 144,
		LITERAL___far = 145,
		LITERAL___interrupt = 146,
		LITERAL_pascal = 147,
		LITERAL__pascal = 148,
		LITERAL___pascal = 149,
		LITERAL__stdcall = 150,
		LITERAL___stdcall = 151,
		LITERAL_delete = 152,
		MYFUNCTION = 153,
		MYPARAM = 154,
		MYDECLAR = 155,
		MYEXPRESSION = 156,
		MYBODY = 157,
		MYSTATEMENT = 158,
		MYCLASS = 159,
		MYTEMPLATE = 160,
		MYNAMESPACE = 161,
		Whitespace = 162,
		Comment = 163,
		CPPComment = 164,
		PREPROC_DIRECTIVE = 165,
		LineDirective = 166,
		Space = 167,
		Pragma = 168,
		Error = 169,
		EndOfContinuedLine = 170,
		EndOfLine = 171,
		Escape = 172,
		Digit = 173,
		Decimal = 174,
		LongSuffix = 175,
		UnsignedSuffix = 176,
		FloatSuffix = 177,
		Exponent = 178,
		UniversalCharacterName = 179,
		HexQuad = 180,
		HexadecimalDigit = 181,
		Vocabulary = 182,
		Number = 183,
		NULL_TREE_LOOKAHEAD = 3
	};
#ifdef __cplusplus
};
#endif
#endif /*INC_STDCTokenTypes_hpp_*/
